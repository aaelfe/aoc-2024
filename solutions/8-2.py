import sys
from pathlib import Path

project_root = str(Path(__file__).parent.parent)
sys.path.append(project_root)

from utils.base import script_handler

input = """.....8............1r.....a....................O...
.a..............4..q.........................0...9
....a.........8...................................
.................D.....................V0.........
.....d............................................
.r..........q....................................O
..................q...........................9...
..............D..............X..................V.
........D................X.................0......
.........8............X...........................
....................J....................9..0.....
..a..B............r..W........J...............R..Q
......WD...q.....1..........Q..............R..V...
.1W...................u...........................
..............................u.............R.....
....B..............d..c..................R........
.............J..............X............V........
......1...........................3...............
......B...........d...................3...........
............8..J.......u.....3....................
...........4.............6........................
.....4v.............d.......................O.....
..........................v.2.....................
.............................................s....
..................4...M..W..................s.....
......................m...........................
...........M......................................
..b..................c............................
....................Co..........KQ.......O.s......
.................C............................s...
.......x............c............................3
........o......A....U.....Q.........5.............
...............U..................j...5...........
.....K.......U................j..........2........
.......A.v.....w.....................c...5........
..K....................................j..........
...............K.yk....B.............2............
......C....b..............x...........Y...........
.....mA..C......U.................................
........M.....A.....................2..6...5......
.............................7.......Y............
.m.M......w..v....................................
............m...........x.....Y...................
....................k....w........................
......b.....w..S....7.............................
..............S..............x...........Y........
....................S...6.........................
.y...............S..........7.6.................9.
o..........k...............b......................
yo...........k...................................."""

def are_collinear(p1, p2, p3):
    """Check if three points are collinear"""
    # Check if the three points form a straight line
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3
    
    # Collinearity check using cross product
    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))) < 1e-10

def find_antinodes(grid):
    # Find all antenna locations
    antennas = {}
    for y, row in enumerate(grid):
        for x, cell in enumerate(row):
            if cell != '.':
                if cell not in antennas:
                    antennas[cell] = []
                antennas[cell].append((x, y))
    
    # Set to track unique antinode locations
    antinodes = set()
    
    # Check antinodes for each frequency
    for freq, locations in antennas.items():
        # If only one antenna of this frequency, skip
        if len(locations) < 2:
            continue
        
        # Check every possible point that could be an antinode
        for y in range(len(grid)):
            for x in range(len(grid[0])):
                # Count how many antennas of this frequency are in line with this point
                line_antennas = [
                    loc for loc in locations 
                    if any(are_collinear(loc, (x, y), other_loc) 
                           for other_loc in locations if other_loc != loc)
                ]
                
                # If at least two antennas are in line with this point, it's an antinode
                if len(line_antennas) >= 2:
                    antinodes.add((x, y))
    
    return len(antinodes)


@script_handler
def main() -> None:
    # Convert input to 2D grid
    grid = [list(line.strip()) for line in input.strip().splitlines()]
    
    # Calculate and print number of unique antinode locations
    result = find_antinodes(grid)
    print(f"Number of unique antinode locations: {result}")
    
if __name__ == "__main__":
    main()